
class FeedForward(nn.Module):
    def __init__(self, dim, hidden_dim, dropout = 0.):
        super().__init__()
        self.net = nn.Sequential(
            nn.LayerNorm(dim),
            nn.Linear(dim, hidden_dim),
            nn.GELU(),
            nn.Dropout(dropout),
            nn.Linear(hidden_dim, dim),
            nn.Dropout(dropout)
        )

    def forward(self, x):
        return self.net(x)

class Attention(nn.Module):
    def __init__(self, dim, heads = 8, dim_head = 64, dropout = 0.):
        super().__init__()
        inner_dim = dim_head *  heads
        project_out = not (heads == 1 and dim_head == dim)

        self.heads = heads
        self.scale = dim_head ** -0.5

        self.norm = nn.LayerNorm(dim)

        self.attend = nn.Softmax(dim = -1)
        self.dropout = nn.Dropout(dropout)

        self.to_qkv = nn.Linear(dim, inner_dim * 3, bias = False)

        self.to_out = nn.Sequential(
            nn.Linear(inner_dim, dim),
            nn.Dropout(dropout)
        ) if project_out else nn.Identity()

    def forward(self, x):
        x = self.norm(x)

        qkv = self.to_qkv(x).chunk(3, dim = -1)
        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = self.heads), qkv)

        dots = torch.matmul(q, k.transpose(-1, -2)) * self.scale

        attn = self.attend(dots)
        attn = self.dropout(attn)

        out = torch.matmul(attn, v)
        out = rearrange(out, 'b h n d -> b n (h d)')
        return self.to_out(out)

class Transformer(nn.Module):
    def __init__(self, dim, depth, heads, dim_head, mlp_dim, dropout = 0.):
        super().__init__()
        self.norm = nn.LayerNorm(dim)
        self.layers = nn.ModuleList([])
        for _ in range(depth):
            self.layers.append(nn.ModuleList([
                Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout),
                FeedForward(dim, mlp_dim, dropout = dropout)
            ]))

    def forward(self, x):
        for attn, ff in self.layers:
            x = attn(x) + x
            x = ff(x) + x

        return self.norm(x)


class ImageTo3D(nn.Module):
    def __init__(self, target_shape):
        super(ImageTo3D, self).__init__()
        self.target_shape = target_shape

    def forward(self, x):
        # 将 4D 图像 (BS, C, H, W) 转换为 3D 张量 (BS, L, C)
        bs, c, h, w = x.shape
        x = x.view(bs, c, -1).permute(0, 2, 1)  # 转换为 (BS, L, C)
        return x.view(self.target_shape)    

class TensorToImage(nn.Module):
    def __init__(self, original_shape):
        super(TensorToImage, self).__init__()
        self.original_shape = original_shape

    def forward(self, x):
        # 将 3D 张量 (BS, L, C) 转换回 4D 图像 (BS, C, H, W)
        bs, l, c = x.shape
        h, w = self.original_shape[2], self.original_shape[3]
        x = x.permute(0, 2, 1).view(bs, c, h, w)  # 转换为 (BS, C, H, W)
        return x   
    
class PathchEmbedding(nn.Module):
    def __init__(self, in_channels, patch_size, embed_dim, num_patches,dropout):
        # dropout  的rate
        super().__init__()
        self.patcher = nn.Sequential(
            nn.Conv2d(in_channels, out_channels = embed_dim, kernel_size=patch_size, stride=patch_size)
            nn.Flatten(2)
        )

        self.cls_token = nn.Parameter(torch.randn(size = (1, 1, embed_dim)), requires_grad=True)
        self.position_embedding = nn.Parameter(
            torch.randn(size=(1, num_patches+1, embed_dim))
        )
        self.dropout = nn.Dropout(p = dropout)
        
        
    def forward(self, x):
        bs = x.shape[0]
        x = self.patcher(x).permute(0, 2,1 )
        
        cls_token = self.cls_token.expand(bs, -1, -1)
        x = torch.cat([x, cls_token], dim=1)
        x += self.position_embedding
        
        return x
 
# 以上是切小方块 含  cls
# patch_size  , num_patches, num_classes  num_heads

class myViT(nn.Module):
    def __init__(self, 
                 in_channels, out_channels, embed_dim,num_encoders,
                 patch_size, num_patches, 
                 num_classes, num_heads):
        super(myViT,self).__init__()
        
        self.patch_embedding = PathchEmbedding(in_channels, patch_size, embed_dim, num_patches, )
        
        encoder_layer = nn.TransformerEncoderLayer(
            d_model=embed_dim, 
            nhead=num_heads,
            
        )
        self.encoder = nn.TransformerEncoder(encoder_layer=encoder_layer,
                                        num_layers=num_encoders)
        decoder_layer = nn.TransformerDecoderLayer(
            d_model=embed_dim, 
            nhead=num_heads,
        )
        self.decoder = nn.TransformerDecoder(decoder_layer=decoder_layer,
                                             num_layers=num_encoders)
        self.mlp = nn.Linear(in_features=in_channels, out_features=num_classes)
    def forward(self,x):
        
        x = PathchEmbedding(x)
        
        x = self.encoder(x)
        x = self.decoder(x)
        
        x_cut_cls_token = x[:,0, :]
        out = self.mlp(x_cut_cls_token)
        return 

class ViT(nn.Module):
    def __init__(self, *, image_size, patch_size, num_classes, dim, depth, heads, mlp_dim, pool = 'cls', channels = 3, dim_head = 64, dropout = 0., emb_dropout = 0.):
        super().__init__()
        image_height, image_width = pair(image_size)
        patch_height, patch_width = pair(patch_size)

        assert image_height % patch_height == 0 and image_width % patch_width == 0, 'Image dimensions must be divisible by the patch size.'

        num_patches = (image_height // patch_height) * (image_width // patch_width)
        patch_dim = channels * patch_height * patch_width
        assert pool in {'cls', 'mean'}, 'pool type must be either cls (cls token) or mean (mean pooling)'

        self.to_patch_embedding = nn.Sequential(
            Rearrange('b c (h p1) (w p2) -> b (h w) (p1 p2 c)', p1 = patch_height, p2 = patch_width),
            nn.LayerNorm(patch_dim),
            nn.Linear(patch_dim, dim),
            nn.LayerNorm(dim),
        )

        self.pos_embedding = nn.Parameter(torch.randn(1, num_patches + 1, dim))
        self.cls_token = nn.Parameter(torch.randn(1, 1, dim))
        self.dropout = nn.Dropout(emb_dropout)

        self.transformer = Transformer(dim, depth, heads, dim_head, mlp_dim, dropout)

        self.pool = pool
        self.to_latent = nn.Identity()

        self.mlp_head = nn.Linear(dim, num_classes)

    def forward(self, img):
        x0 = self.to_patch_embedding(img)
        b, n, _ = x0.shape

        cls_tokens = repeat(self.cls_token, '1 1 d -> b 1 d', b = b)
        x2 = torch.cat((cls_tokens, x0), dim=1)
        x2 += self.pos_embedding[:, :(n + 1)]
        x3 = self.dropout(x2)

        x = self.transformer(x3)

        # x = x.mean(dim = 1) if self.pool == 'mean' else x[:, 0]

        x = self.to_latent(x)
        return x

def q_shift(input, shift_pixel=1, gamma=0.25, patch_resolution=None, add_residual=True):
    """
    Q-Shift 操作的 4D 版本，输入形状为 (B, C, H, W)。
    
    Args:
        input: 输入张量，形状为 (B, C, H, W)。
        shift_pixel: 每个方向的移动距离。
        gamma: 每个方向的通道数比例。
        add_residual: 是否添加残差连接，默认为 True。
    
    Returns:
        经过 Q-Shift 操作后的张量，如果 add_residual=True，则带有残差连接。
    """
    assert gamma <= 1/4
    B, N, C = input.shape
    if patch_resolution is None:
        sqrt_N = int(N ** 0.5)
        if sqrt_N * sqrt_N == N:
            patch_resolution = (sqrt_N, sqrt_N)
        else:
            raise ValueError("Cannot infer a valid patch_resolution for the given input shape.")

    input = input.transpose(1, 2).reshape(B, C, patch_resolution[0], patch_resolution[1])
    m_op = MSMRShift(768).cuda()
    B, C, H, W = input.shape
    output = torch.zeros_like(input)

    # 计算每个方向的通道数
    gamma_C = int(C * gamma)

    # # 右移
    # output[:, 0:gamma_C, :, shift_pixel:W] = input[:, 0:gamma_C, :, 0:W-shift_pixel]
    # # 左移
    # output[:, gamma_C:2*gamma_C, :, 0:W-shift_pixel] = input[:, gamma_C:2*gamma_C, :, shift_pixel:W]
    # # 下移
    # output[:, 2*gamma_C:3*gamma_C, shift_pixel:H, :] = input[:, 2*gamma_C:3*gamma_C, 0:H-shift_pixel, :]
    # # 上移
    # output[:, 3*gamma_C:4*gamma_C, 0:H-shift_pixel, :] = input[:, 3*gamma_C:4*gamma_C, shift_pixel:H, :]
    # # 保留剩余通道
    # output[:, 4*gamma_C:, ...] = input[:, 4*gamma_C:, ...]
    
    
    output = m_op(input)
    gamma_ = int(1/gamma)

    # 下移
    # 如果 add_residual=True，则添加残差连接
    if add_residual:
        output = input + output

    return output.flatten(2).transpose(1,2)

    